#!/usr/bin/env node

/**
 * –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –° –ö–ï–®-–ë–ê–°–¢–ò–ù–ì–û–ú
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
 * 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç BUILD_TIME –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * 2. –û–±–Ω–æ–≤–ª—è–µ—Ç timestamp –≤ Service Worker
 * 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π app hash –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
 * 4. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node auto-deploy.js
 * 
 * –î–ª—è VPS:
 * BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") node auto-deploy.js
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import crypto from 'crypto';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  blue: '\x1b[34m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(colors[color] + message + colors.reset);
}

function generateTimestamp() {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  
  return `${year}${month}${day}-${hours}${minutes}`;
}

function generateAppHash() {
  const hash = crypto.createHash('md5');
  const filesToCheck = [
    'package.json',
    'client/src/App.tsx',
    'client/src/main.tsx',
    'client/public/sw.js',
    'server/index.ts',
    'server/routes.ts'
  ];
  
  for (const file of filesToCheck) {
    const fullPath = path.join(process.cwd(), file);
    if (fs.existsSync(fullPath)) {
      const stats = fs.statSync(fullPath);
      hash.update(`${file}:${stats.mtime.getTime()}`);
    }
  }
  
  return hash.digest('hex').substring(0, 8);
}

function updateServiceWorker(timestamp) {
  const swPath = path.join(process.cwd(), 'client/public/sw.js');
  
  if (!fs.existsSync(swPath)) {
    log('‚ùå Service Worker —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + swPath, 'red');
    return false;
  }
  
  let swContent = fs.readFileSync(swPath, 'utf8');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º BUILD_TIMESTAMP
  const timestampRegex = /const BUILD_TIMESTAMP = '[^']*';/;
  const newTimestamp = `const BUILD_TIMESTAMP = '${timestamp}';`;
  
  if (timestampRegex.test(swContent)) {
    swContent = swContent.replace(timestampRegex, newTimestamp);
  } else {
    log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ BUILD_TIMESTAMP –≤ Service Worker', 'red');
    return false;
  }
  
  fs.writeFileSync(swPath, swContent);
  log('‚úÖ Service Worker –æ–±–Ω–æ–≤–ª–µ–Ω —Å timestamp: ' + timestamp, 'green');
  return true;
}

function updateEnvFile(buildTime) {
  const envPath = path.join(process.cwd(), '.env');
  let envContent = '';
  
  if (fs.existsSync(envPath)) {
    envContent = fs.readFileSync(envPath, 'utf8');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º BUILD_TIME
  const buildTimeRegex = /BUILD_TIME=.*/;
  const newBuildTime = `BUILD_TIME=${buildTime}`;
  
  if (buildTimeRegex.test(envContent)) {
    envContent = envContent.replace(buildTimeRegex, newBuildTime);
  } else {
    envContent += '\n' + newBuildTime + '\n';
  }
  
  fs.writeFileSync(envPath, envContent);
  log('‚úÖ .env –æ–±–Ω–æ–≤–ª–µ–Ω —Å BUILD_TIME: ' + buildTime, 'green');
}

function main() {
  log('üöÄ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ...', 'blue');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º timestamp –∏ build time
  const timestamp = generateTimestamp();
  const buildTime = new Date().toISOString();
  const appHash = generateAppHash();
  
  log('üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä–∫–µ:', 'yellow');
  log('  Timestamp: ' + timestamp);
  log('  Build Time: ' + buildTime);
  log('  App Hash: ' + appHash);
  
  // 1. –û–±–Ω–æ–≤–ª—è–µ–º Service Worker
  if (!updateServiceWorker(timestamp)) {
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Service Worker', 'red');
    process.exit(1);
  }
  
  // 2. –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
  updateEnvFile(buildTime);
  
  // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
  process.env.BUILD_TIME = buildTime;
  
  log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'green');
  log('', 'reset');
  log('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', 'yellow');
  log('  1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
  log('  2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
  log('  3. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥');
  log('', 'reset');
  log('üîÑ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã:', 'blue');
  log('  - –û—Ç–∫—Ä–æ–π—Ç–µ /test-cache.html –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
  log('  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /api/version –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏');
  log('  - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–µ–º');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { generateTimestamp, generateAppHash, updateServiceWorker, updateEnvFile };