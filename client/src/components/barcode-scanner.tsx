import React, { useEffect, useRef, useState } from 'react';
import { BrowserMultiFormatReader } from '@zxing/browser';
import { Result, BarcodeFormat, DecodeHintType } from '@zxing/library';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { useToast } from '@/hooks/use-toast';
import { useAdminTranslation } from '@/hooks/use-language';
import { Camera, X, Loader2 } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';

interface BarcodeScannerProps {
  isOpen: boolean;
  onClose: () => void;
  orderItems: any[];
  onUpdateItem: (productId: number, newWeight: number) => void;
  onAddItem: (product: any, weight: number) => void;
  allProducts: any[];
}

export function BarcodeScanner({ 
  isOpen, 
  onClose, 
  orderItems, 
  onUpdateItem, 
  onAddItem,
  allProducts 
}: BarcodeScannerProps) {
  const { t: adminT } = useAdminTranslation();
  const { toast } = useToast();
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const codeReaderRef = useRef<BrowserMultiFormatReader | null>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [isInitializing, setIsInitializing] = useState(false);
  const [confirmDialog, setConfirmDialog] = useState<{
    isOpen: boolean;
    product: any;
    weight: number;
  }>({ isOpen: false, product: null, weight: 0 });
  const [lastScannedBarcode, setLastScannedBarcode] = useState<string>('');
  const [lastScanTime, setLastScanTime] = useState<number>(0);
  const [debugMessages, setDebugMessages] = useState<string[]>([]);
  const [cameraStatus, setCameraStatus] = useState<'idle' | 'requesting' | 'granted' | 'denied' | 'error'>('idle');

  // Query for barcode configuration
  const { data: barcodeConfig } = useQuery({
    queryKey: ['/api/barcode/config'],
    queryFn: () => apiRequest('GET', '/api/barcode/config'),
  });

  // Debug logging function for mobile devices
  const addDebugMessage = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setDebugMessages(prev => [...prev.slice(-4), `${timestamp}: ${message}`]);
    console.log(message);
  };

  // Parse barcode using dynamic configuration
  const parseBarcode = (barcode: string) => {
    addDebugMessage(`üîß parseBarcode: –ø–æ–ª—É—á–µ–Ω ${barcode}`);
    
    if (!barcodeConfig) {
      addDebugMessage(`‚ùå parseBarcode: –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
      return null;
    }
    
    if (!barcodeConfig.enabled) {
      addDebugMessage(`‚ùå parseBarcode: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞`);
      return null;
    }
    
    // Validate barcode length
    const minLength = Math.max(barcodeConfig.productCodeEnd, barcodeConfig.weightEnd);
    addDebugMessage(`üîß parseBarcode: –¥–ª–∏–Ω–∞ ${barcode.length}, –º–∏–Ω–∏–º—É–º ${minLength}`);
    
    if (barcode.length < minLength) {
      addDebugMessage(`‚ùå parseBarcode: —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π`);
      return null;
    }
    
    // Extract product code using config (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ 1-based, —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 0-based)
    const productCode = barcode.substring(
      barcodeConfig.productCodeStart - 1, 
      barcodeConfig.productCodeEnd
    );
    
    // Extract weight using config
    const weightStr = barcode.substring(
      barcodeConfig.weightStart - 1, 
      barcodeConfig.weightEnd
    );
    
    console.log('Barcode parsing with CONFIG:', {
      barcode,
      config: {
        productCodeStart: barcodeConfig.productCodeStart,
        productCodeEnd: barcodeConfig.productCodeEnd,
        weightStart: barcodeConfig.weightStart,
        weightEnd: barcodeConfig.weightEnd,
        weightUnit: barcodeConfig.weightUnit
      },
      productCode,
      weightStr,
      explanation: 'User sees 1-based positions, system uses 0-based'
    });
    
    // Convert weight to grams (divide by 10 for Israeli barcode format)
    const rawWeight = parseInt(weightStr);
    if (isNaN(rawWeight)) return null;
    
    // Israeli barcode format: weight is stored * 10, so divide by 10
    const weight = Math.round(rawWeight / 10);
    
    // Apply weight unit conversion
    const finalWeight = barcodeConfig.weightUnit === 'kg' ? weight * 1000 : weight;
    
    return {
      productCode,
      weight: finalWeight
    };
  };

  const findProductByBarcode = (productCode: string) => {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ (—É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏)
    const normalizedCode = productCode.replace(/^0+/, '');
    
    return allProducts.find(product => {
      if (!product.barcode) return false;
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞
      const normalizedProductBarcode = product.barcode.replace(/^0+/, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
      return product.barcode === productCode ||
             product.barcode === `0${productCode}` ||
             product.barcode === normalizedCode ||
             normalizedProductBarcode === productCode ||
             normalizedProductBarcode === normalizedCode;
    });
  };

  const handleBarcodeDetected = (result: Result) => {
    console.log('=== handleBarcodeDetected START ===');
    const barcodeText = result.getText();
    const currentTime = Date.now();
    
    addDebugMessage(`üéØ –ù–ê–ß–ê–õ–û: handleBarcodeDetected(${barcodeText})`);
    addDebugMessage(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${barcodeConfig ? '–∑–∞–≥—Ä—É–∂–µ–Ω–∞' : '–ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (!barcodeConfig) {
      addDebugMessage(`‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
      return;
    }
    
    addDebugMessage(`üîß –í–∫–ª—é—á–µ–Ω: ${barcodeConfig.enabled}`);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    if (barcodeText === lastScannedBarcode && currentTime - lastScanTime < 5000) {
      addDebugMessage(`‚è≥ –î–µ–±–∞—É–Ω—Å–∏–Ω–≥: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç ${barcodeText}`);
      console.log('Barcode debounced - ignoring duplicate scan:', barcodeText);
      return;
    }
    
    setLastScannedBarcode(barcodeText);
    setLastScanTime(currentTime);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
    setIsScanning(false);
    
    console.log('Processing barcode:', barcodeText);
    addDebugMessage(`üîß –í—ã–∑–æ–≤ parseBarcode –¥–ª—è: ${barcodeText}`);
    
    const parsed = parseBarcode(barcodeText);
    addDebugMessage(`üîß –†–µ–∑—É–ª—å—Ç–∞—Ç parseBarcode: ${parsed ? JSON.stringify(parsed) : 'null'}`);
    
    if (!parsed) {
      addDebugMessage(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞: ${barcodeText}`);
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      onClose();
      toast({
        variant: "destructive",
        title: adminT('barcode.invalidFormat'),
        description: adminT('barcode.invalidFormatDescription')
      });
      return;
    }
    
    addDebugMessage(`‚úÖ –®—Ç—Ä–∏—Ö-–∫–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: –∫–æ–¥=${parsed.productCode}, –≤–µ—Å=${parsed.weight}–≥`);

    const { productCode, weight } = parsed;
    console.log('Parsed product code:', productCode, 'weight:', weight);
    
    // Check if product exists in current order
    addDebugMessage(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∑–∞–∫–∞–∑–µ: –∫–æ–¥=${productCode}, —Ç–æ–≤–∞—Ä–æ–≤=${orderItems.length}`);
    
    const orderItem = orderItems.find(item => {
      const itemBarcode = item.product?.barcode;
      if (!itemBarcode) return false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–¥–∞
      return itemBarcode === productCode ||
             itemBarcode === `0${productCode}` ||
             itemBarcode === productCode.replace(/^0+/, '') ||
             itemBarcode.replace(/^0+/, '') === productCode.replace(/^0+/, '');
    });

    if (orderItem) {
      addDebugMessage(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–∫–∞–∑–µ: ${orderItem.product.name}`);
      addDebugMessage(`üîß –í—ã–∑–æ–≤ onUpdateItem(${orderItem.productId}, ${weight})`);
      // Update existing item weight - –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
      onUpdateItem(orderItem.productId, weight);
      addDebugMessage(`üîß –í—ã–∑–æ–≤ onClose()`);
      onClose();
      addDebugMessage(`üîß –ü–æ–∫–∞–∑ toast –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞`);
      toast({
        title: adminT('barcode.weightUpdated'),
        description: `${orderItem.product.name}: ${weight}${adminT('units.g')}`
      });
      return;
    }
    
    addDebugMessage(`‚ÑπÔ∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–∫–∞–∑–µ, –∏—â–µ–º –≤ –±–∞–∑–µ...`);

    // Check if product exists in store
    addDebugMessage(`üîç –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –∫–æ–¥–æ–º: ${productCode}`);
    addDebugMessage(`üìù –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: ${allProducts.length}`);
    
    const product = findProductByBarcode(productCode);
    console.log('Product found:', product ? product.name : 'NOT FOUND');
    console.log('All products barcodes:', allProducts.map(p => ({ name: p.name, barcode: p.barcode })));
    
    if (!product) {
      addDebugMessage(`‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: –∫–æ–¥=${productCode}`);
      addDebugMessage(`üîß –í—ã–∑–æ–≤ onClose() –¥–ª—è –æ—à–∏–±–∫–∏`);
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      onClose();
      addDebugMessage(`üîß –ü–æ–∫–∞–∑ toast –¥–ª—è –æ—à–∏–±–∫–∏`);
      toast({
        variant: "destructive",
        title: adminT('barcode.productNotFound'),
        description: `${adminT('barcode.productNotFoundDescription')} (${productCode})`
      });
      return;
    }
    
    addDebugMessage(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω: ${product.name}`);

    // Product exists but not in order - –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    addDebugMessage(`üéØ –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${product.name}, ${weight}–≥`);
    addDebugMessage(`üîß –í—ã–∑–æ–≤ onClose()`);
    onClose();
    addDebugMessage(`üîß –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`);
    setConfirmDialog({
      isOpen: true,
      product,
      weight
    });
  };

  const handleAddToOrder = () => {
    if (confirmDialog.product && confirmDialog.weight > 0) {
      onAddItem(confirmDialog.product, confirmDialog.weight);
      toast({
        title: adminT('barcode.productAdded'),
        description: `${confirmDialog.product.name}: ${confirmDialog.weight}${adminT('units.g')}`
      });
      setConfirmDialog({ isOpen: false, product: null, weight: 0 });
    }
  };

  const handleCancelAddToOrder = () => {
    setConfirmDialog({ isOpen: false, product: null, weight: 0 });
  };

  const startScanning = async () => {
    if (!videoRef.current) return;

    try {
      setIsInitializing(true);
      setDebugMessages([]);
      setCameraStatus('idle');
      addDebugMessage('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
      const userAgent = navigator.userAgent;
      const isIOS = /iPad|iPhone|iPod/.test(userAgent);
      const isAndroid = /Android/.test(userAgent);
      const isChrome = /Chrome/.test(userAgent);
      const isSafari = /Safari/.test(userAgent) && !isChrome;
      
      addDebugMessage(`üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${isIOS ? 'iOS' : isAndroid ? 'Android' : 'Desktop'}`);
      addDebugMessage(`üåê –ë—Ä–∞—É–∑–µ—Ä: ${isChrome ? 'Chrome' : isSafari ? 'Safari' : 'Other'}`);
      addDebugMessage(`üîí HTTPS: ${window.location.protocol === 'https:' ? '–î–∞' : '–ù–µ—Ç'}`);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
      if (codeReaderRef.current) {
        try {
          codeReaderRef.current.reset();
        } catch (resetError) {
          addDebugMessage('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞');
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ZXing
      if (!BrowserMultiFormatReader) {
        addDebugMessage('‚ùå ZXing –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        throw new Error('ZXing library not available');
      }
      
      try {
        codeReaderRef.current = new BrowserMultiFormatReader();
        addDebugMessage('‚úÖ ZXing —Å–∫–∞–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        if (!codeReaderRef.current.decodeFromVideoElement) {
          throw new Error('decodeFromVideoElement method not available');
        }
        addDebugMessage('‚úÖ –ú–µ—Ç–æ–¥—ã —Å–∫–∞–Ω–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
      } catch (readerError) {
        addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞: ${readerError.message}`);
        throw readerError;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–º–µ—Ä—ã
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('getUserMedia not supported in this browser');
      }
      
      addDebugMessage('üì± –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ...');
      setCameraStatus('requesting');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const constraints = {
        video: {
          facingMode: 'environment', // –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞
          width: { ideal: 1280 },
          height: { ideal: 720 }
        }
      };

      let stream;
      
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–¥–Ω—é—é –∫–∞–º–µ—Ä—É
        stream = await navigator.mediaDevices.getUserMedia(constraints);
        addDebugMessage('‚úÖ –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞');
      } catch (backCameraError) {
        addDebugMessage('‚ö†Ô∏è –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –ª—é–±—É—é...');
        // –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –ª—é–±—É—é –∫–∞–º–µ—Ä—É
        stream = await navigator.mediaDevices.getUserMedia({ video: true });
        addDebugMessage('‚úÖ –ü–µ—Ä–µ–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞');
      }
      
      setCameraStatus('granted');
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫ –∫ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—É
      videoRef.current.srcObject = stream;
      addDebugMessage('üé• –ü–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—É');
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          addDebugMessage('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ (5 —Å–µ–∫—É–Ω–¥)');
          reject(new Error('Video loading timeout (5 seconds)'));
        }, 5000);
        
        const handleMetadata = () => {
          clearTimeout(timeout);
          const width = videoRef.current?.videoWidth || 0;
          const height = videoRef.current?.videoHeight || 0;
          addDebugMessage(`üìê –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ: ${width} x ${height}`);
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
          if (width === 0 || height === 0) {
            addDebugMessage('‚ö†Ô∏è –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ');
            reject(new Error('Invalid video dimensions'));
            return;
          }
          
          resolve(true);
        };
        
        const handleError = (error: Event) => {
          clearTimeout(timeout);
          addDebugMessage('‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ');
          reject(error);
        };
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —É–∂–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if (videoRef.current!.readyState >= 1) {
          addDebugMessage('üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
          handleMetadata();
          return;
        }
        
        videoRef.current!.addEventListener('loadedmetadata', handleMetadata, { once: true });
        videoRef.current!.addEventListener('error', handleError, { once: true });
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ
      try {
        await videoRef.current.play();
        addDebugMessage('‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        const videoState = {
          paused: videoRef.current.paused,
          readyState: videoRef.current.readyState,
          currentTime: videoRef.current.currentTime,
          duration: videoRef.current.duration
        };
        addDebugMessage(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ: ${JSON.stringify(videoState)}`);
        
      } catch (playError) {
        addDebugMessage(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${playError.message}`);
        // –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        await new Promise(resolve => setTimeout(resolve, 200));
        try {
          await videoRef.current.play();
          addDebugMessage('‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏');
        } catch (secondError) {
          addDebugMessage(`‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${secondError.message}`);
          throw secondError;
        }
      }
      
      setIsScanning(true);

      // –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤
      addDebugMessage('üîç –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤...');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      try {
        addDebugMessage('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è
        if (videoRef.current.paused || videoRef.current.readyState < 2) {
          addDebugMessage('‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –≥–æ—Ç–æ–≤–æ, –æ–∂–∏–¥–∞–µ–º...');
          await new Promise(resolve => setTimeout(resolve, 500));
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ stream
        const stream = videoRef.current.srcObject as MediaStream;
        const videoTrack = stream.getVideoTracks()[0];
        
        if (!videoTrack) {
          throw new Error('No video track found');
        }
        
        addDebugMessage(`üìπ –í–∏–¥–µ–æ —Ç—Ä–µ–∫: ${videoTrack.label}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        let scanTimeoutId: NodeJS.Timeout;
        let scanAttempts = 0;
        let shouldContinueScanning = true;
        
        const aggressiveScanLoop = () => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è
          if (!shouldContinueScanning || !videoRef.current || !codeReaderRef.current) {
            if (scanTimeoutId) clearTimeout(scanTimeoutId);
            addDebugMessage('üõë –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (—Ñ–ª–∞–≥ –∏–ª–∏ –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤)');
            return;
          }
          
          scanAttempts++;
          
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –∏ –Ω–∞–ª–∏—á–∏–µ —Å–∫–∞–Ω–µ—Ä–∞
            if (videoRef.current && 
                videoRef.current.readyState >= 2 && 
                videoRef.current.videoWidth > 0 && 
                codeReaderRef.current) {
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 20 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
              if (scanAttempts % 20 === 0) {
                addDebugMessage(`üîÑ –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ ${scanAttempts})`);
              }
              
              // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å callback
              try {
                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ callback
                addDebugMessage(`üîß –°–æ–∑–¥–∞–Ω–∏–µ callback –¥–ª—è ZXing`);
                
                const maxDebugCallback = (result, error) => {
                  addDebugMessage(`üîî CALLBACK –í–´–ó–í–ê–ù! result: ${!!result}, error: ${!!error}`);
                  
                  if (result) {
                    const barcodeText = result.getText();
                    addDebugMessage(`‚úÖ –®—Ç—Ä–∏—Ö-–∫–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${barcodeText}`);
                    addDebugMessage(`üîç –§–æ—Ä–º–∞—Ç: ${result.getFormat()}`);
                    shouldContinueScanning = false; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                    addDebugMessage(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞: ${barcodeText}`);
                    
                    // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    try {
                      addDebugMessage(`üöÄ –ó–∞–ø—É—Å–∫ handleBarcodeDetected`);
                      handleBarcodeDetected(result);
                    } catch (handlerError) {
                      addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${handlerError.message}`);
                      console.error('Handler error:', handlerError);
                    }
                  } else if (error) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    if (error.name && 
                        !error.name.includes('NotFoundException') && 
                        !error.name.includes('TypeError') &&
                        !error.message.includes('No MultiFormat Readers') &&
                        !error.message.includes('No code found')) {
                      if (scanAttempts % 100 === 0) {
                        addDebugMessage(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.name} - ${error.message}`);
                      }
                    }
                  }
                };
                
                addDebugMessage(`üîß –ü–µ—Ä–µ–¥–∞—á–∞ callback –≤ ZXing`);
                codeReaderRef.current.decodeFromVideoElement(videoRef.current, maxDebugCallback);
              } catch (scanError) {
                if (scanAttempts % 100 === 0) {
                  addDebugMessage(`‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${scanError.message}`);
                }
              }
            } else {
              if (scanAttempts % 20 === 0) {
                const readyState = videoRef.current?.readyState || 'no video';
                const width = videoRef.current?.videoWidth || 'no width';
                addDebugMessage(`‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –≥–æ—Ç–æ–≤–æ: readyState=${readyState}, width=${width}`);
              }
            }
          } catch (error) {
            if (scanAttempts % 50 === 0) {
              addDebugMessage(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
            }
          }
          
          // –ë–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∫–∞–∂–¥—ã–µ 50ms –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
          scanTimeoutId = setTimeout(aggressiveScanLoop, 50);
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        addDebugMessage('üöÄ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
        aggressiveScanLoop();
        
        addDebugMessage('üéØ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω - –Ω–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥!');
      } catch (scannerError) {
        addDebugMessage(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–∞–Ω–µ—Ä–∞: ${scannerError.message}`);
        
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        addDebugMessage('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        let scanTimeoutId: NodeJS.Timeout;
        
        const scanLoop = () => {
          if (!isScanning || !videoRef.current) {
            if (scanTimeoutId) clearTimeout(scanTimeoutId);
            return;
          }
          
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –≥–æ—Ç–æ–≤
            if (videoRef.current.readyState >= 2) {
              // –°–æ–∑–¥–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏—é –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
              const fallbackCallback = (result, error) => {
                if (result) {
                  addDebugMessage(`‚úÖ –®—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–∞–π–¥–µ–Ω: ${result.getText()}`);
                  handleBarcodeDetected(result);
                }
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
                if (error && !error.name.includes('NotFoundException') && !error.name.includes('TypeError')) {
                  addDebugMessage(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.name}`);
                }
              };
              
              codeReaderRef.current?.decodeFromVideoElement(videoRef.current, fallbackCallback);
            } else {
              addDebugMessage('‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
            }
          } catch (alternativeError) {
            addDebugMessage(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${alternativeError.message}`);
          }
          
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 1000ms (–º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ)
          scanTimeoutId = setTimeout(scanLoop, 1000);
        };
        
        // –ù–∞—á–∏–Ω–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        scanLoop();
        addDebugMessage('üéØ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤–∏–¥–µ–æ
        setTimeout(() => {
          if (videoRef.current) {
            addDebugMessage(`üìä –í–∏–¥–µ–æ —Å—Ç–∞—Ç—É—Å: ${videoRef.current.readyState}, —Ä–∞–∑–º–µ—Ä: ${videoRef.current.videoWidth}x${videoRef.current.videoHeight}`);
          }
        }, 1000);
      }
      
    } catch (error) {
      setCameraStatus('error');
      addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: ${error.message}`);
      
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤';
      let errorTitle = '–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞';
      
      if (error.name === 'NotAllowedError') {
        errorMessage = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞';
        setCameraStatus('denied');
        addDebugMessage('üö´ –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω');
      } else if (error.name === 'NotFoundError') {
        errorMessage = '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ';
        addDebugMessage('üìµ –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      } else if (error.name === 'NotReadableError') {
        errorMessage = '–ö–∞–º–µ—Ä–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º';
        addDebugMessage('üîí –ö–∞–º–µ—Ä–∞ –∑–∞–Ω—è—Ç–∞');
      } else if (error.name === 'OverconstrainedError') {
        errorMessage = '–ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
        addDebugMessage('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
      } else if (error.message && error.message.includes('timeout')) {
        errorMessage = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–µ—Ä—ã –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
        addDebugMessage('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–µ—Ä—ã');
      } else if (error.message && error.message.includes('getUserMedia')) {
        errorMessage = '–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS';
        addDebugMessage('üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º/HTTPS');
      }
      
      toast({
        variant: "destructive",
        title: errorTitle,
        description: errorMessage
      });
    } finally {
      setIsInitializing(false);
    }
  };

  const stopScanning = () => {
    addDebugMessage('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞...');
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    setIsScanning(false);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä
    if (codeReaderRef.current) {
      try {
        // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞–Ω–µ—Ä
        codeReaderRef.current = null;
        addDebugMessage('‚úÖ –°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } catch (error) {
        addDebugMessage('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞');
      }
    }
    
    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫
    if (videoRef.current) {
      try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        videoRef.current.pause();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
        if (videoRef.current.srcObject) {
          const stream = videoRef.current.srcObject as MediaStream;
          stream.getTracks().forEach(track => {
            if (track.readyState === 'live') {
              track.stop();
              addDebugMessage(`üé• –¢—Ä–µ–∫ –∫–∞–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${track.kind}`);
            }
          });
          videoRef.current.srcObject = null;
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤–∏–¥–µ–æ
        videoRef.current.removeAttribute('src');
        videoRef.current.currentTime = 0;
        videoRef.current.load();
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ç–µ–º–Ω—ã–π —ç–∫—Ä–∞–Ω
        videoRef.current.style.opacity = '1';
        videoRef.current.style.filter = 'none';
        videoRef.current.style.transform = 'none';
        
        addDebugMessage('‚úÖ –í–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–æ');
      } catch (error) {
        addDebugMessage('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∏–¥–µ–æ');
      }
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞
    setLastScannedBarcode('');
    setLastScanTime(0);
    
    setIsScanning(false);
    setIsInitializing(false);
    setCameraStatus('idle');
    
    addDebugMessage('‚úÖ –°–∫–∞–Ω–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  };

  useEffect(() => {
    let timeoutId: NodeJS.Timeout;
    
    if (isOpen && !isScanning && !isInitializing) {
      addDebugMessage('üîÑ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
      // Small delay to ensure video element is ready
      timeoutId = setTimeout(() => {
        addDebugMessage('‚è∞ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ useEffect');
        startScanning();
      }, 100);
    }
    
    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      // –¢–æ–ª—å–∫–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–µ –æ—á–∏—â–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
      if (isOpen === false) {
        stopScanning();
      }
    };
  }, [isOpen]);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (isOpen && !isScanning && !isInitializing && cameraStatus === 'active') {
      const forceStartTimer = setTimeout(() => {
        addDebugMessage('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
        startScanning();
      }, 500);
      
      return () => clearTimeout(forceStartTimer);
    }
  }, [isOpen, cameraStatus]);

  // Add video event listeners for better debugging
  useEffect(() => {
    const video = videoRef.current;
    if (!video) return;
    
    const handleVideoError = (event: Event) => {
      const video = event.target as HTMLVideoElement;
      if (video.error) {
        let errorMsg = '–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ: ';
        switch (video.error.code) {
          case 1:
            errorMsg += '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞';
            break;
          case 2:
            errorMsg += '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
            break;
          case 3:
            errorMsg += '–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è';
            break;
          case 4:
            errorMsg += '–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
            break;
          default:
            errorMsg += '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        }
        addDebugMessage(`‚ùå ${errorMsg}`);
        setCameraStatus('error');
      }
    };

    const handleVideoLoadStart = () => {
      addDebugMessage('üì∫ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞—á–∞—Ç–∞');
    };

    const handleVideoLoadedMetadata = () => {
      addDebugMessage('üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    };

    const handleVideoCanPlay = () => {
      addDebugMessage('‚ñ∂Ô∏è –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é');
    };

    const handleVideoPlay = () => {
      addDebugMessage('‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–æ—Å—å');
    };

    const handleVideoPause = () => {
      addDebugMessage('‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    };

    video.addEventListener('error', handleVideoError);
    video.addEventListener('loadstart', handleVideoLoadStart);
    video.addEventListener('loadedmetadata', handleVideoLoadedMetadata);
    video.addEventListener('canplay', handleVideoCanPlay);
    video.addEventListener('play', handleVideoPlay);
    video.addEventListener('pause', handleVideoPause);

    return () => {
      video.removeEventListener('error', handleVideoError);
      video.removeEventListener('loadstart', handleVideoLoadStart);
      video.removeEventListener('loadedmetadata', handleVideoLoadedMetadata);
      video.removeEventListener('canplay', handleVideoCanPlay);
      video.removeEventListener('play', handleVideoPlay);
      video.removeEventListener('pause', handleVideoPause);
    };
  }, [isOpen]);

  const handleClose = () => {
    addDebugMessage('üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∫–∞–Ω–µ—Ä–∞...');
    stopScanning();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    setTimeout(() => {
      setCameraStatus('idle');
      setDebugMessages([]);
      onClose();
    }, 100);
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={handleClose}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2 text-sm">
              <Camera className="h-4 w-4" />
              {adminT('barcode.scanTitle')}
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-3">
            <div className="relative bg-black rounded-lg overflow-hidden" style={{ aspectRatio: '4/3', minHeight: '300px' }}>
              <video
                ref={videoRef}
                className="w-full h-full object-cover"
                playsInline
                muted
                autoPlay
                controls={false}
                onError={(e) => addDebugMessage('‚ùå –û—à–∏–±–∫–∞ video —ç–ª–µ–º–µ–Ω—Ç–∞')}
                onLoadStart={() => addDebugMessage('üì∫ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞—á–∞—Ç–∞')}
                onCanPlay={() => addDebugMessage('‚ñ∂Ô∏è –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é')}
                onPlaying={() => addDebugMessage('‚ñ∂Ô∏è –í–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è')}
                webkit-playsinline="true"
              />
              
              <canvas
                ref={canvasRef}
                className="hidden"
                style={{ display: 'none' }}
              />
              
              {isInitializing && (
                <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50">
                  <div className="text-white text-center">
                    <Loader2 className="h-8 w-8 animate-spin mx-auto mb-2" />
                    <p>{adminT('barcode.initializingCamera')}</p>
                  </div>
                </div>
              )}
              
              {isScanning && !isInitializing && (
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="border-2 border-white w-48 h-24 rounded-lg opacity-50"></div>
                </div>
              )}
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
              {cameraStatus === 'granted' && isScanning && !isInitializing && (
                <div className="absolute top-2 right-2 text-xs bg-green-600 bg-opacity-80 text-white px-2 py-1 rounded animate-pulse">
                  üîç –ê–∫—Ç–∏–≤–Ω–æ
                </div>
              )}
              
              {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é */}
              {cameraStatus === 'granted' && isScanning && !isInitializing && (
                <div className="absolute bottom-2 left-2 right-2 text-xs bg-black bg-opacity-70 text-white px-2 py-1 rounded text-center">
                  –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥
                </div>
              )}
            </div>
            
            <div className="text-center text-sm text-gray-600">
              {adminT('barcode.scanInstructions')}
            </div>
            
            {/* –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
            {debugMessages.length > 0 && (
              <div className="bg-gray-50 border rounded-lg p-3 text-xs max-h-32 overflow-y-auto">
                <div className="font-medium mb-2 text-gray-700">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</div>
                {debugMessages.map((message, index) => (
                  <div key={index} className="text-gray-600 mb-1">
                    {message}
                  </div>
                ))}
              </div>
            )}
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–µ—Ä—ã –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <div className="flex items-center justify-center gap-4 text-sm">
              <div className="flex items-center gap-2">
                <div className={`w-2 h-2 rounded-full ${
                  cameraStatus === 'idle' ? 'bg-gray-400' :
                  cameraStatus === 'requesting' ? 'bg-yellow-400' :
                  cameraStatus === 'granted' ? 'bg-green-400' :
                  cameraStatus === 'denied' ? 'bg-red-400' :
                  'bg-red-400'
                }`}></div>
                <span>
                  {cameraStatus === 'idle' ? '–û–∂–∏–¥–∞–Ω–∏–µ' :
                   cameraStatus === 'requesting' ? '–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ...' :
                   cameraStatus === 'granted' ? '–ö–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞' :
                   cameraStatus === 'denied' ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' :
                   '–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã'}
                </span>
              </div>
              
              <div className="flex items-center gap-2">
                <div className={`w-2 h-2 rounded-full ${
                  isScanning ? 'bg-blue-500 animate-pulse' : 'bg-gray-400'
                }`}></div>
                <span>
                  {isScanning ? '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ù–µ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç'}
                </span>
              </div>
            </div>
            
            <div className="flex justify-end gap-2">
              {(cameraStatus === 'error' || cameraStatus === 'denied') && (
                <Button variant="outline" onClick={startScanning}>
                  <Camera className="h-4 w-4 mr-2" />
                  –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </Button>
              )}
              <Button variant="outline" onClick={() => {
                try {
                  addDebugMessage('üß™ –¢–µ—Å—Ç: –∏–º–∏—Ç–∞—Ü–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ 2025874002804');
                  const mockResult = {
                    getText: () => '2025874002804',
                    getFormat: () => 'EAN_13'
                  };
                  handleBarcodeDetected(mockResult as any);
                } catch (error) {
                  addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error}`);
                }
              }}>
                üß™ –¢–µ—Å—Ç
              </Button>
              
              <Button variant="outline" onClick={() => {
                addDebugMessage('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫');
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                setIsScanning(false);
                setIsInitializing(false);
                
                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
                setTimeout(() => {
                  addDebugMessage('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
                  startScanning();
                }, 100);
              }}>
                üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
              </Button>
              <Button variant="outline" onClick={handleClose}>
                <X className="h-4 w-4 mr-2" />
                {adminT('actions.cancel')}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      <AlertDialog open={confirmDialog.isOpen} onOpenChange={(open) => 
        setConfirmDialog(prev => ({ ...prev, isOpen: open }))
      }>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>{adminT('barcode.productNotInOrder')}</AlertDialogTitle>
            <AlertDialogDescription>
              {adminT('barcode.productFoundInStore')}: <strong>{confirmDialog.product?.name}</strong>
              <br />
              {adminT('barcode.weight')}: <strong>{confirmDialog.weight}{adminT('units.g')}</strong>
              <br />
              {adminT('barcode.addToOrderQuestion')}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={handleCancelAddToOrder}>
              {adminT('actions.cancel')}
            </AlertDialogCancel>
            <AlertDialogAction onClick={handleAddToOrder}>
              {adminT('barcode.addToOrder')}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}