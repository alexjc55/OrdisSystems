import { useEffect, useState } from 'react';
import { Button } from '@/components/ui/button';
import { RefreshCw, AlertTriangle } from 'lucide-react';
import { useCommonTranslation, useAdminTranslation } from '@/hooks/use-language';

// Cache Buster Component - Forces app updates and clears all caches with proper state management (FINAL SW-INDEPENDENT VERSION)
export function CacheBuster() {
  const [initialLoad, setInitialLoad] = useState(true);
  
  // Safe translation hook with error handling
  let t: (key: string) => string;
  try {
    const { t: translationFunc } = useCommonTranslation();
    t = translationFunc;
  } catch (error) {
    console.error('Translation hook error:', error);
    // Fallback translation function
    t = (key: string) => {
      const fallbackTexts: Record<string, string> = {
        'updatePanel.available': '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        'updatePanel.later': '–ü–æ–∑–∂–µ',
        'updatePanel.update': '–û–±–Ω–æ–≤–∏—Ç—å',
        'updatePanel.updating': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...'
      };
      return fallbackTexts[key] || key;
    };
  }

  useEffect(() => {
    // Check for Service Worker updates
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.ready.then(registration => {
        // Listen for updates
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          if (newWorker) {
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                // SW detected new version, but don't auto-show - let checkForUpdates handle it
                console.log('üì¶ [CacheBuster] SW updatefound detected, using own logic');
              }
            });
          }
        });

        // Check for waiting service worker - but don't auto-show
        if (registration.waiting) {
          console.log('üì¶ [CacheBuster] SW waiting detected, using own logic');
        }
      });

      // Listen for messages from Service Worker
      navigator.serviceWorker.addEventListener('message', event => {
        if (event.data && event.data.type === 'NEW_VERSION_AVAILABLE') {
          // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç SW - –¥–∞–¥–∏–º checkForUpdates —Å–∞–º–æ–º—É —Ä–µ—à–∞—Ç—å
          console.log('üì¶ [CacheBuster] SW notified about new version, but using own logic');
        }
      });
    }

    // Force cache check on mount
    checkForUpdates();

    // Check for updates every 30 seconds
    const interval = setInterval(checkForUpdates, 30000);
    
    return () => clearInterval(interval);
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const performAutoUpdate = (currentAppHash: string, data: any) => {
    console.log('ü§ñ [CacheBuster] Performing automatic update silently...');
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      const timestamp = Date.now().toString();
      localStorage.setItem('last_update', timestamp);
      localStorage.setItem('last_processed_hash', currentAppHash);
      localStorage.setItem('app_hash', currentAppHash);
      localStorage.setItem('app_version', data.version);
      localStorage.setItem('build_time', data.buildTime);
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–∞–≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
      const processedHashes = JSON.parse(localStorage.getItem('processed_hashes') || '[]');
      if (!processedHashes.includes(currentAppHash)) {
        processedHashes.push(currentAppHash);
        localStorage.setItem('processed_hashes', JSON.stringify(processedHashes));
      }
      
      console.log('‚úÖ [CacheBuster] Auto-update completed, reloading page...');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      setTimeout(() => {
        window.location.reload();
      }, 500);
      
    } catch (error) {
      console.error('‚ùå [CacheBuster] Auto-update failed:', error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
      setTimeout(() => {
        window.location.reload();
      }, 500);
    }
  };

  const checkForUpdates = async () => {
    try {
      // Check if there's a new version by comparing app hash
      const response = await fetch('/api/version?' + Date.now(), {
        cache: 'no-store',
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache'
        }
      });
      const data = await response.json();
      
      // Check app hash for file changes
      const lastAppHash = localStorage.getItem('app_hash');
      const currentAppHash = data.appHash;
      
      // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (initialLoad) {
        setInitialLoad(false);
        if (!lastAppHash) {
          localStorage.setItem('app_hash', currentAppHash);
          localStorage.setItem('app_version', data.version);
          localStorage.setItem('build_time', data.buildTime);
        }
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const lastUpdate = localStorage.getItem('last_update');
      const recentlyUpdated = lastUpdate && (Date.now() - parseInt(lastUpdate)) < 300000; // 5 –º–∏–Ω—É—Ç
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ö–µ—à–∞
      const updateSkipped = localStorage.getItem('update_skipped');
      const skippedRecently = updateSkipped && (Date.now() - parseInt(updateSkipped)) < 600000; // 10 –º–∏–Ω—É—Ç
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ö–µ—à
      const lastProcessedHash = localStorage.getItem('last_processed_hash');
      let alreadyProcessed = lastProcessedHash === currentAppHash;
      
      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ö–µ—à–∏
      try {
        const processedHashes = JSON.parse(localStorage.getItem('processed_hashes') || '[]');
        if (processedHashes.includes(currentAppHash)) {
          alreadyProcessed = true;
          console.log('üö´ [CacheBuster] Hash permanently processed, skipping notification');
        }
      } catch (e) {
        // Ignore parsing errors
      }
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üîç [CacheBuster] Debug info:', {
        lastAppHash,
        currentAppHash,
        hashesChanged: lastAppHash !== currentAppHash,
        recentlyUpdated,
        skippedRecently,
        alreadyProcessed,
        lastUpdate: lastUpdate ? new Date(parseInt(lastUpdate)).toLocaleTimeString() : 'none',
        updateSkipped: updateSkipped ? new Date(parseInt(updateSkipped)).toLocaleTimeString() : 'none',
        localStorage_currentSessionHash: localStorage.getItem('currentSessionHash'),
        isTestHash: currentAppHash.startsWith('test_'),
        timestamp: new Date().toLocaleTimeString()
      });
      
      // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –µ—Å–ª–∏ —Ö–µ—à –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const hashChanged = lastAppHash && lastAppHash !== currentAppHash;
      const shouldAutoUpdate = hashChanged && !recentlyUpdated && !alreadyProcessed;
      
      if (shouldAutoUpdate) {
        console.log('üîÑ [CacheBuster] New version detected! Auto-updating...');
        console.log(`üîÑ [CacheBuster] Hash changed: ${lastAppHash} ‚Üí ${currentAppHash}`);
        performAutoUpdate(currentAppHash, data);
      }
      
      // Store current hash
      localStorage.setItem('app_hash', currentAppHash);
      localStorage.setItem('app_version', data.version);
      localStorage.setItem('build_time', data.buildTime);
    } catch (error) {
      console.log('Version check failed:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã - –≤—Å–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

  // –ë–æ–ª—å—à–µ –Ω–µ—Ç UI - –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  return null;
}

// Admin component for forcing cache clear
export function AdminCacheBuster() {
  const [isClearing, setIsClearing] = useState(false);
  const [isTesting, setIsTesting] = useState(false);
  const { t: adminT } = useAdminTranslation();

  const testAutoUpdate = async () => {
    setIsTesting(true);
    
    try {
      // –û—á–∏—â–∞–µ–º –∫–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ö–µ—à–µ–π –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
      localStorage.removeItem('processed_hashes');
      localStorage.removeItem('last_processed_hash');
      localStorage.removeItem('last_update');
      localStorage.removeItem('update_skipped');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ö–µ—à
      const response = await fetch('/api/version?test=notification');
      const data = await response.json();
      
      console.log(`üß™ –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω! –ù–æ–≤—ã–π —Ö–µ—à: ${data.appHash}`);
      
    } catch (error) {
      console.error('Test auto-update failed:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setIsTesting(false);
    }
  };

  const clearAllCaches = async () => {
    setIsClearing(true);
    
    try {
      // Clear browser caches
      if ('caches' in window) {
        const cacheNames = await caches.keys();
        await Promise.all(cacheNames.map(name => caches.delete(name)));
      }

      // Update Service Worker cache version
      if ('serviceWorker' in navigator) {
        try {
          const registration = await navigator.serviceWorker.getRegistration();
          if (registration && registration.active) {
            // Check if postMessage method exists on active worker
            if (typeof registration.active.postMessage === 'function') {
              registration.active.postMessage({ type: 'FORCE_UPDATE' });
            }
          }
        } catch (swError) {
          console.warn('Service Worker message failed:', swError);
          // Continue with cache clearing even if SW fails
        }
      }

      // Clear localStorage related to cache
      localStorage.removeItem('app_hash');
      localStorage.removeItem('app_version');
      localStorage.removeItem('build_time');
      localStorage.removeItem('last_update');
      localStorage.removeItem('update_skipped');

      alert('–ö–µ—à –æ—á–∏—â–µ–Ω! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ.');
      window.location.reload();
      
    } catch (error) {
      console.error('Cache clear failed:', error);
      alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setIsClearing(false);
    }
  };

  return (
    <div className="flex gap-2">
      <Button
        variant="outline"
        size="sm"
        onClick={testAutoUpdate}
        disabled={isTesting}
        className="border-blue-300 text-blue-600 hover:bg-blue-50"
      >
        {isTesting ? (
          <>
            <RefreshCw className="h-4 w-4 mr-1 animate-spin" />
            {adminT('actions.loading')}...
          </>
        ) : (
          <>
            üß™ {adminT('settings.testAutoUpdate')}
          </>
        )}
      </Button>
      
      <Button
        variant="outline"
        size="sm"
        onClick={clearAllCaches}
        disabled={isClearing}
        className="border-red-300 text-red-600 hover:bg-red-50"
      >
        {isClearing ? (
          <>
            <RefreshCw className="h-4 w-4 mr-1 animate-spin" />
            {adminT('actions.loading')}...
          </>
        ) : (
          <>
            <RefreshCw className="h-4 w-4 mr-1" />
            {adminT('settings.clearCache')}
          </>
        )}
      </Button>
    </div>
  );
}